version: '3.3'

networks:
  default:
  servicebus:

services:

  staging-deps:
    image: todolist-model-service
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGODB_HOST=mongo
      - DEBUG=servicebus*,register-handlers*
      - LOG_LEVEL=10
      - KAFKA_HOST=kafka1
      - KAFKA_PORT=29092
      - KAFKA_BROKERS=kafka1:29092,kafka2:29095,kafka3:29098
    networks:
      - servicebus
      - default
    depends_on:
      - zookeeper
      - kafka1
      - kafka2
      - kafka3
      - mongo

  mongo:
    image: mongo
    networks:
      - default

  # reinstall dev deps to get testing tools and run staging tests
  staging:
    image: node:14
    volumes:
      - ..:/usr/src/service
    working_dir: /usr/src/service
    networks:
      - servicebus
      - default
    environment:
      - KAFKA_HOST=kafka1
      - KAFKA_PORT=29092
      - KAFKA_BROKERS=kafka1:29092,kafka2:29095,kafka3:29098
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DEBUG=$DEBUG
    command: npm run test:staging

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    networks:
      - servicebus
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka1:
    image: confluentinc/cp-kafka:5.5.0
    hostname: kafka1
    container_name: kafka1
    labels:
      - "custom.project=kafkajs"
      - "custom.service=kafka1"
    depends_on:
      - zookeeper
    networks:
      - servicebus
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  
  kafka2:
    image: confluentinc/cp-kafka:5.5.0
    hostname: kafka2
    container_name: kafka2
    labels:
      - "custom.project=kafkajs"
      - "custom.service=kafka2"
    depends_on:
      - zookeeper
    networks:
      - servicebus
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:29095,PLAINTEXT_HOST://localhost:9095
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  kafka3:
    image: confluentinc/cp-kafka:5.5.0
    hostname: kafka3
    container_name: kafka3
    labels:
      - "custom.project=kafkajs"
      - "custom.service=kafka3"
    depends_on:
      - zookeeper
    networks:
      - servicebus
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:29098,PLAINTEXT_HOST://localhost:9098
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
